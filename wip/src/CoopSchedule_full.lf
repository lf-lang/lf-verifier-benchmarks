/**
 * Challenge problem for verification:
 * over-approximating the system behavior
 * by marking some operation as opaque.
 *
 * The tasks should continuously run, and
 * a report is generated every 30 seconds.
 */
 target C {
    build: "bash ../scripts/zephyr_build.sh nrf52dk_nrf52832 flash",
    // build: "bash ../scripts/zephyr_build.sh qemu_cortex_m3 flash",
    threading: false,
    files: ["../lib/lf_counter.h", "../lib/lf_counter.c"],
    cmake-include: ["../scripts/zephyr.cmake", "../scripts/lf_counter.cmake"],
    fast: true,
    build-type: Release,
}

preamble {=
    /* Define the time interval in seconds. */
    #ifndef TM_TEST_DURATION
    #define TM_TEST_DURATION    SEC(10)
    #endif

    #define N_TESTS 5
    // #define GPIO_DEBUG
    #ifdef GPIO_DEBUG
        #define TOGGLE(x) do {gpio_toggle(x);} while (false)
    #else
        #define TOGGLE(x) do { } while (false)
    #endif
=}

/**
 * Report every 30 seconds in physical time.
 */

reactor Sink {
    input in:int;
}

reactor Trigger {
    output out:int
    timer t(0,1 usec)

    reaction(t) -> out {= 
        lf_set(out, 1); 
    =}
}

reactor Task {
    output out:int;
    input cnt:int;
    input stop:int;
    state counter:int(0);
    logical action _reset;

    reaction(cnt) {=
        self->counter++;
    =}

    reaction(stop) -> out, _reset {=
        lf_set(out, self->counter);
        lf_schedule(_reset, 0);
    =}

    reaction(_reset) {=
        self->counter=0;
    =}
}

reactor Report {
    input[5] in:int;
    output stop:int;

    logical action timeout;

    state total:{=unsigned long=}(0);
    state last_total:{=unsigned long=}(0);
    state average:{=unsigned long=}(0);
    state received:int(0)
    state n_tests:int(0)

    preamble {=
        #include "lf_counter.h"
        void *timeout_action;
        // Implement the callback routine, defined in lf_counter.h
        void alarm_cb(const struct device *counter_dev,
                uint8_t chan_id, uint32_t ticks,
                void *user_data)
        {
            lf_schedule(timeout_action,0);
        }
    =}

    reaction(startup) -> timeout {=
        timeout_action = timeout;
        setup_timer(TM_TEST_DURATION/1000);
        start_timer();
    =}

    reaction(timeout) -> stop {=
        lf_set(stop,0);
    =}

    reaction(in) {=
        // self->total = 0;
        for (int i = 0; i < in_width; i++) {
            if (in[i]->is_present) {
                self->total += in[i]->value;
            }
        }
        
        /* Calculate the average of all the counters.  */
        self->average = self->total / in_width;

        /* See if there are any errors. */
        for (int i = 0; i < in_width; i++) {
            if (in[i]->value < (self->average - 1) ||
                in[i]->value > (self->average + 1)) {
                lf_print_error_and_exit("Got %u expected %u +/-1\n", in[i]->value, self->average);
            }
        }

        /* Show the time period total.  */
        printf("LF:Cooperative Scheduling=%lu\n", self->total - self->last_total);

        /* Reset  */
        self->total = 0;

        if(++self->n_tests < N_TESTS) {
            restart_timer(TM_TEST_DURATION/1000);
        } else {
            lf_request_stop();
        }
    =}
}

main reactor {
    trigger = new Trigger()
    tasks = new[5] Task();
    report = new Report();
    (trigger.out)+ -> tasks.cnt
    tasks.out -> report.in;
    (report.stop)+ -> tasks.stop
}