target C;

reactor Camera {
    output out:int;
    state img:int;
    timer t(0, 10 msec);
    reaction(t) -> out {= lf_set(out, self->img); =}
}

reactor LiDAR {
    output out:int;
    state img:int;
    timer t(0, 20 msec);
    reaction(t) -> out {= lf_set(out, self->img); =}
}

reactor IMU {
    output out:int;
    state img:int;
    timer t(0, 5 msec);
    reaction(t) -> out {= lf_set(out, self->img); =}
}

reactor Pedal {
    output out:int;
    physical action a;
    reaction(a) -> out {= lf_set(out, true); =}
}

reactor ADASProcessor {
    input in1:int;
    input in2:int;
    output out1:int;
    output out2:int;
    logical action a(0 msec);
    state requestStop:int;
    reaction(in2, in1) -> a {=
        lf_schedule(a, 0);
        // ... Perform neural network computation.
    =}
    reaction(a) -> out1, out2 {=
        if (self->requestStop) lf_set(out2, true);
    =}
}

reactor Brakes {
    input in1:int;
    input in2:int;
    state s:int;
    reaction(in2, in1) {=
        // ... Actuate the car brakes.
        self->s = 0;
    =} deadline(10 msec) {=

    =}
}

reactor Sensors {
    output out1:int;
    output out2:int;
    c = new Camera();
    l = new LiDAR();
    c.out -> out1;
    l.out -> out2;
}

reactor Dashboard {
    input in:int;
    input in2:int;
    state s:int;
    reaction(in, in2) {=
        self->s = 0;
    =}
}

// After the ADASProcessor receive data, the brake is actuated
// before the next sensor data arrives.
@property(name="responsiveness", tactic="bmc", spec="G[0, 20 sec](false)")
main reactor {
    // s = new Sensors();
    c = new Camera();
    l = new LiDAR();
    i = new IMU();
    v = new ADASProcessor();
    v2 = new ADASProcessor();
    b = new Brakes();
    b2 = new Brakes();
    // p = new Pedal();
    d = new Dashboard();
    c.out -> v.in1;
    l.out -> v.in2;
    l.out -> v2.in1;
    i.out -> v2.in2;
    v2.out2 -> b2.in2 after 3 msec;
    // The value of 500 usec needs to be arrived
    // after rigorous testing such that, with
    // the tech stack in use, the transmission
    // time can never be SMALLER than 500 usec
    // (i.e. the after delay is a lowerbound).
    // The delay is placed here to minimize
    // the lag and not to hurt performance.
    // p.out -> b.in1;
    v.out2 -> b.in2 after 5 msec;
    v.out1 -> d.in;
    v2.out1 -> d.in2;
}
