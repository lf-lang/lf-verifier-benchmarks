#!/bin/bash

# Exit 1 if any command returns with a non-zero exit code.
set -eo pipefail

# keep track of the last executed command
trap 'last_command=$current_command; current_command=$BASH_COMMAND' DEBUG
# echo an error message before exiting
trap 'echo "\"${last_command}\" command filed with exit code $?."' EXIT

# Get the scripts directory
scripts_dir=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

# Test directories
# Note: properties in these directories
# must specify the "expect" field for
# the test script to work properly.
test_dir_array=(
    $scripts_dir/../benchmarks
)

# Large programs excluded from testing
exclude_array=(
    Election.lf
    Elevator.lf
    Factorial.lf
    Fibonacci.lf
    Pipe.lf
    Railroad.lf
    RoadsideUnit.lf
    Subway.lf
)

# Run benchmarks and collect results.
for test_dir in "${test_dir_array[@]}"; do
    for program_file in $test_dir/src/*.lf; do
        # Get the program name without the extension from the file path.
        program=${program_file:$((${#test_dir} + 5))} # prune $test_dir/src/ from path.
        # Execute the test if the file is not in the exclude array.
        if [[ ! " ${exclude_array[*]} " =~ " ${program} " ]]; then
            lfc $program_file
        else
            echo "Skipping $program because it is on the list of excluded programs."
        fi
    done
done
