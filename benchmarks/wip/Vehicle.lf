target C;

reactor Camera {
    output out:{=image_t=};
    state img:{=image_t=};
    timer t(0, 17 msec); // 60 fps
    reaction(t) -> out {= lf_set(out, img); =}
}

reactor LiDAR {
    output out:{=image_t=};
    state img:{=image_t=};
    timer t(0, 34 msec); // 30 fps
    reaction(t) -> out {= lf_set(out, img); =}
}

reactor Pedal {
    output out:bool;
    physical action a;
    reaction(a) -> out {= lf_set(out, true); =}
}

reactor ADASProcessor {
    input in1:bool;
    input in2:bool;
    output out1:bool;
    output out2:bool;
    logical action a(50 msec);
    state requestStop:bool;
    reaction(in2, in1) -> a {=
        lf_schedule(a, 0);
        // ... Perform neural network computation.
    =}
    reaction(a) -> out1, out2 {=
        if (self->requestStop) lf_set(out, true);
    =} deadline(50 msec) {==}
}

reactor Brakes {
    input in1:bool;
    input in2:bool;
    reaction(in2, in1) {=
        // ... Actuate the car brakes.
    =} deadline(1 msec) {==}
}

reactor Sensors {
    output out1:bool;
    output out2:bool;
    c = new Camera();
    l = new LiDAR();
    c.out -> out1;
    l.out -> out2;
}

reactor Dashboard {
    input in:bool;
    // timer t(0, 1 msec);
    reaction(in) {==}
    // reaction(t) {==}
}

// After the ADASProcessor receive data, the brake is actuated
// before the next sensor data arrives.
//@property(name="responsiveness", tactic="induction", spec="")
main reactor Vehicle {
    s = new Sensors();
    v = new ADASProcessor();
    b = new Brakes();
    p = new Pedal();
    d = new Dashboard();
    s.out1 -> v.in1;
    s.out2 -> v.in2;
    // The value of 500 usec needs to be arrived
    // after rigorous testing such that, with
    // the tech stack in use, the transmission
    // time can never be SMALLER than 500 usec
    // (i.e. the after delay is a lowerbound).
    // The delay is placed here to minimize
    // the lag and not to hurt performance.
    p.out -> b.in1;
    v.out2 -> b.in2 after 5 msec;
    v.out1 -> d.in;
}