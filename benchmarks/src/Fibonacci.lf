target C {
    timeout: 10 nsec
}
reactor Fib {
    output out:int
    timer t(0, 1 nsec)
    logical action incrementN
    logical action saveLast
    logical action saveSecondLast
    state N:int=0
    state result:int=0
    state lastResult:int=0
    state secondLastResult:int=0
    reaction(t) -> out, incrementN, saveLast, saveSecondLast {=
        if (self->N < 2) {
            self->result = 1;
        } else {
            self->result = self->lastResult + self->secondLastResult;
        }
        lf_set(out, self->result);
        lf_schedule(incrementN, 0);
        lf_schedule(saveLast, 0);
        lf_schedule(saveSecondLast, 0);
    =}
    reaction(incrementN) {=
        self->N += 1;
    =}
    reaction(saveSecondLast) {=
        self->secondLastResult = self->lastResult;
    =}
    reaction(saveLast) {=
        self->lastResult = self->result;
    =}
}
reactor Printer {
    input inp:int
    state result:int
    reaction(inp) {=
        self->result = inp->value;
        printf("%d\n", self->result);
    =}
}

@property(name="correctness", tactic="bmc", spec="G[10 nsec](Fibonacci_printer_reaction_1 ==> Fibonacci_printer_result == 89)", expect=true)
main reactor {
    fib = new Fib()
    printer = new Printer()
    fib.out -> printer.inp
}