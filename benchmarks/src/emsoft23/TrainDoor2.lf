target C;

@lang("c")
reactor Controller {
    output out1:int
    output out2:int
    reaction(startup) -> out1, out2 {=
        lf_set(out1, 1);
        lf_set(out2, 2);
    =}
}

@lang("c")
reactor Train {
    input inp:int
    output out:int
    state received:int
    reaction(inp) -> out {=
        self->received = inp->value;
        lf_set(out, self->received);
    =}
}

@lang("c")
reactor Door {
    input inp:int
    output out:int
    state received:int
    reaction(inp) -> out {=
        self->received = inp->value;
        lf_set(out, self->received);
    =}
}

@lang("c")
reactor Sink {
    input in1:int
    input in2:int
    state sum:int = 0;
    reaction(in1, in2) {=
        self->sum = in1->value + in2->value;
    =}
}

@property(name="train_does_not_move_until_door_closes", tactic="bmc", spec="(!TrainDoor.t.reaction_1)U[0, 1 sec](TrainDoor.d.reaction_1)", expect=false)
@lang("c")
main reactor {
    c = new Controller()
    t = new Train()
    d = new Door()
    s = new Sink()
    c.out1 -> t.inp after 1 sec
    c.out2 -> d.inp after 1 sec
    t.out -> s.in1
    d.out -> s.in2
}
