target C;

reactor Camera {
    output out:int;
    state img:int;
    timer t(0, 17 msec); // 60 fps
    reaction(t) -> out {= 
        self->img = 1;
        lf_set(out, self->img);
    =}
}

reactor LiDAR {
    output out:int;
    state img:int;
    timer t(0, 34 msec); // 30 fps
    reaction(t) -> out {= 
        self->img = 2;
        lf_set(out, self->img);
    =}
}

reactor ADASProcessor {
    input in1:int;
    input in2:int;
    output out1:int;
    output out2:int;
    logical action a(50 msec);
    state requestStop:int;
    reaction(in2, in1) -> a {=
        lf_schedule(a, 0);
        // ... Perform neural network computation.
        self->requestStop = 1;
    =}
    reaction(a) -> out1, out2 {=
        if (self->requestStop == 1)
            lf_set(out2, 1);
    =}
}

reactor Brakes {
    input in1:int;
    input in2:int;
    state brakesApplied:int(0);
    reaction(in1, in2) {=
        // ... Actuate the car brakes.
        self->brakesApplied = 1;
    =}
}

reactor Dashboard {
    input in:int;
    state received:int;
    reaction(in) {=
        self->received = 1;
    =}
}

@property(name="responsive", tactic="bmc", spec="G[0, 1 msec]( ADAS_v_reaction_0 ==> (F[0, 100 msec]( ADAS_b_reaction_0 )))", expect=true)
main reactor {
    c = new Camera();
    l = new LiDAR();
    v = new ADASProcessor();
    b = new Brakes();
    d = new Dashboard();
    c.out -> v.in1;
    l.out -> v.in2;    
    v.out2 -> b.in2 after 5 msec;
    v.out1 -> d.in;
}