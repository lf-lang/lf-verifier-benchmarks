target C

@lang("c")
reactor Coordinator {
  input ok1: bool
  input ok2: bool
  input ok3: bool
  output request_review: bool
  output acknowledge: bool
  logical action submit
  state tally: int = 0
  state submitted: bool = false

  reaction(startup) -> request_review {=
    lf_set(request_review, true);
  =}

  reaction(ok1) -> request_review, submit {=
    if (ok1->value) {
      self->tally += 1;
      if (self->tally == 3) {
          lf_schedule(submit, 0);
      }
    }
    else {
      // If any of the participants failed,
      // request a review from all of them
      lf_set(request_review, true);
      self->tally = 0;
    }
  =}

  reaction(ok2) -> request_review, submit {=
    if (ok2->value) {
      self->tally += 1;
      if (self->tally == 3) {
          lf_schedule(submit, 0);
      }
    }
    else {
      // If any of the participants failed,
      // request a review from all of them
      lf_set(request_review, true);
      self->tally = 0;
    }
  =}

  reaction(ok3) -> request_review, submit {=
    if (ok3->value) {
      self->tally += 1;
      if (self->tally == 3) {
          lf_schedule(submit, 0);
      }
    }
    else {
      // If any of the participants failed,
      // request a review from all of them
      lf_set(request_review, true);
      self->tally = 0;
    }
  =}

  reaction(submit) -> acknowledge {=
    self->submitted = true;
    lf_set(acknowledge, true);
  =}
}

@lang("c")
reactor Participant(id: int = 0) {
  input review: bool
  input ack: bool
  output ok: bool
  state looks_good: bool = false
  state acknowledged: bool = false

  reaction(review) -> ok {=
    bool success = rand() > 0.5;
    self->looks_good = success;
    lf_set(ok, success);
  =}

  reaction(ack) {=
    self->acknowledged = true;
  =}
}

@property(
    name = "submitted_implies_looks_good",
    tactic = "bmc",
    spec = "G[0, 60 ms](Submit.c.submitted ==> (Submit.p0.looks_good && Submit.p1.looks_good && Submit.p2.looks_good)",
    expect = true)
@lang("c")
main reactor {
  c = new Coordinator()
  p0 = new Participant(id=0)
  p1 = new Participant(id=1)
  p2 = new Participant(id=2)
  c.request_review -> p0.review after 10 ms
  c.request_review -> p1.review after 10 ms
  c.request_review -> p2.review after 10 ms
  p0.ok -> c.ok1 after 10 ms
  p1.ok -> c.ok2 after 10 ms
  p2.ok -> c.ok3 after 10 ms
  c.acknowledge -> p0.ack after 10 ms
  c.acknowledge -> p1.ack after 10 ms
  c.acknowledge -> p2.ack after 10 ms
}
