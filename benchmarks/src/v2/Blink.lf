/**
 * A simple LF program for blinking an LED on the RPi Pico.
 */
target C {
    platform: {
        name: "rp2040",
        board: "pololu_3pi_2040_robot"
    },
    single-threaded: true
}

preamble {=
#include "pico/stdlib.h"

// Pico W devices use a GPIO on the WIFI chip for the LED,
// so when building for Pico W, CYW43_WL_GPIO_LED_PIN will be defined
#ifdef CYW43_WL_GPIO_LED_PIN
#include "pico/cyw43_arch.h"
#endif

#ifndef LED_DELAY_MS
#define LED_DELAY_MS 200
#endif
=}

reactor LED {
    preamble {=
        // Perform initialisation
        int pico_led_init(void) {
        #if defined(PICO_DEFAULT_LED_PIN)
            // A device like Pico that uses a GPIO for the LED will define PICO_DEFAULT_LED_PIN
            // so we can use normal GPIO functionality to turn the led on and off
            gpio_init(PICO_DEFAULT_LED_PIN);
            gpio_set_dir(PICO_DEFAULT_LED_PIN, GPIO_OUT);
            return PICO_OK;
        #elif defined(CYW43_WL_GPIO_LED_PIN)
            // For Pico W devices we need to initialise the driver etc
            return cyw43_arch_init();
        #endif
        }
        
        // Turn the led on or off
        int pico_set_led(int led_on) {
        #if defined(PICO_DEFAULT_LED_PIN)
            // Just set the GPIO on or off
            gpio_put(PICO_DEFAULT_LED_PIN, led_on);
        #elif defined(CYW43_WL_GPIO_LED_PIN)
            // Ask the wifi "driver" to set the GPIO on or off
            cyw43_arch_gpio_put(CYW43_WL_GPIO_LED_PIN, led_on);
        #endif
        
            // Other application logic
            int led_state = 0;
            if (led_on) led_state = 1;
            else led_state = 0;
            return led_state;
        }
    =}

    state s:int = 0
    timer t(0, 100ms)

    reaction(startup) {=
        int rc = pico_led_init();
        int led_state = 0;
        hard_assert(rc == PICO_OK);
    =}

    reaction(t) {=
        self->s = pico_set_led(self->s);
    =}
}

// FIXME: Support "true" and "false" in properties.
// FIXME: Should be able to remove (...) around (Blink.led.s == 1).
@property(name="blinks", tactic="bmc", 
    spec="G[0, 1 sec]((Blink.led.s == 0) ==> X((Blink.led.s == 1)) || (Blink.led.s == 1) ==> X((Blink.led.s == 0)))")
main reactor {
    led = new LED()
}