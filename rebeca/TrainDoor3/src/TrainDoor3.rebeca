/**
 * A simple test case that contains both cascade and parallel compositions. We
 * use this program to figure out how to add @globalPriority to message servers.
 *
 * There are in general two constraints:
 * 1. Reactions must be invoked in the order of their levels, which is a partial order (reactions can have the same level).
 * 2. If a reaction depends on some inputs, the inputs' "read" handlers must fire _before_ the reaction does.
 *
 * Here we add a common Sink and explores an encoding that delivers the expected behavior.
 * This encoding fires s.reaction_1 twice, but mark the latter one as skipped.
 *
 * Problem:
 * 1. Even though s.reaction_1 has the highest global priority, it still fires before
 *    message servers with lower global priorities. This leads to a premature firing of
 *    s.reaction_1 before the second input has arrived.
 *    Is this a bug in Rebeca? It would be great to have it fixed.
 *    The common sink pattern can only be implemented when global priorities are respected.
 */
reactiveclass Controller(10) {
    knownrebecs {
        Train t;
        Door d;
    }
    statevars {
        // Outputs
        int out1_value;
        int out2_value;
    }
    Controller() {
        self.reaction_1();
    }
    // Level: 1
    @globalPriority(2)
    msgsrv reaction_1() {
        out1_value = 1;
        t.read_port_in(out1_value) after (1000000000);
        out2_value = 2;
        d.read_port_in(out2_value) after (1000000000);
    }
}

reactiveclass Train(10) {
    knownrebecs {
        Sink s;
    }
    statevars {
    	// Outputs
    	int out_value;
        // Inputs
        int in_value;
        boolean in_is_present;
        // State variables
        int received;
    }
    // Level: 1
    @globalPriority(2)
    msgsrv reaction_1() {
        received = in_value;
        out_value = received;
        s.read_port_in1(out_value);
    }
    @globalPriority(1)
    msgsrv read_port_in(int _in_value) {
        in_value = _in_value;
        in_is_present = true;
        self.reaction_1();
    }
}

reactiveclass Door(10) {
    knownrebecs {
        Sink s;
    }
    statevars {
        // Outputs
    	int out_value;
        // Inputs
        int in_value;
        boolean in_is_present;
        // State variables
        int received;
    }
    // Level: 1
    @globalPriority(2)
    msgsrv reaction_1() {
        received = in_value;
        // IMPORTANT: Comment out below to not set this port.
        // s.reaction_1 will stop being triggered.
        out_value = received;
        s.read_port_in2(out_value);
    }
    @globalPriority(1)
    msgsrv read_port_in(int _in_value) {
        in_value = _in_value;
        in_is_present = true;
        self.reaction_1();
    }
}

reactiveclass Sink(10) {
	statevars {
		int in1_value;
		boolean in1_is_present;
		int in2_value;
		boolean in2_is_present;
		int sum;
		int _times_fired_reaction_1;
		
		boolean reaction_1_fired;
		boolean reaction_1_skipped;
	}
	Sink() {
		in1_is_present = false;
		in2_is_present = false;
		sum = 0;
		_times_fired_reaction_1 = 0;
		reaction_1_fired = false;
		reaction_1_skipped = false;
	}
	// We don't want to double fire reaction_1.
	// Level: 2
	@globalPriority(4)
	msgsrv reaction_1() {
		if (!reaction_1_fired) {
			// Actual reaction body.
			sum = in1_value + in2_value;
			// Mark reaction_1 as fired.
			// FIXME: How to reset this at the end of a tag?
			reaction_1_fired = true;
		} else {
			reaction_1_skipped = true;
		}
	}
	@globalPriority(3)
	msgsrv read_port_in1(int _in1_value) {
		in1_value = _in1_value;
        in1_is_present = true;
        // IMPORTANT: Does reaction_1 get invoked after read_port_in2? 
        // Or it gets invoked immediately disregarding priorities.
        // Answer: At time t, reaction_1 happens after both read_port_in1
        //         and read_port_in2.
        // Schedules reaction_1() unconditionally.
        self.reaction_1(); 
	}
	@globalPriority(3)
	msgsrv read_port_in2(int _in2_value) {
		in2_value = _in2_value;
        in2_is_present = true;
        // Schedules reaction_1() unconditionally.
       	self.reaction_1(); 
	}
}

main {
    Controller c(t, d):();
    Train t(s):();
    Door d(s):();
    Sink s():();
}
