/**
 *  Timed‑Rebeca version of the LF Raft benchmark (5 nodes)
 */

env int MSG_HEART       = -1;
env int MSG_ACK         = -2;
env int MSG_ELECTION    = -3;
env int MSG_VOTE        = -4;
env int MSG_LEADER      = -5;

env int TIMEOUT_MS_LOW  = 150;
env int TIMEOUT_MS_HIGH = 300;
env int HEARTBEAT_PERIOD_MS = 100;

env int FOLLOWER   		= 0;
env int CANDIDATE  		= 1;
env int LEADER     		= 2;

env int NUM_NODES		= 5;

reactiveclass RaftNode(10) {

    knownrebecs {
        RaftNode n0;
        RaftNode n1;
        RaftNode n2;
        RaftNode n3;
        RaftNode n4;
    }

    statevars {
        int bank_index;			// ID of this node
        int leader;				// who this node thinks is leader
        int election_timeout;	// in msec
        int term;
        int voted_for;
        int mode;				// FOLLOWER, LEADER, CANDIDATE
        int votes_received;

		// TODO: Document the treatment of multiports in the conversion doc.
        int[5] in_type;
        int[5] in_term;
        boolean[5] in_is_present;
        
        int[5] out_type_value;
        int[5] out_term_value;
        
        // Scientific modeling of communication latencies
        int[5] latencies;

        /* ---- actions (logical‑time triggers) ---- */
        boolean election_timeout_reached_is_present;
        boolean start_election_is_present;
        
        // Used to model the behavior of a min. spacing of forever and the update policy.
        // In this case, an action only triggers a reaction when there are no other
        // such action scheduled in Rebeca's queue, i.e., this variable = 0.
        int election_timeout_reached_pending_count;

        /* ---- multiple‑trigger bookkeeping ---- */
        boolean scheduled_reaction_1;
        boolean scheduled_reaction_2;
        boolean scheduled_reaction_3;
        boolean scheduled_reaction_4;
        boolean scheduled_reaction_5;
        boolean scheduled_reaction_6;
        boolean scheduled_reaction_7;
        boolean scheduled_reaction_8;
        boolean scheduled_reaction_9;
    }

    RaftNode(int id) {
    	bank_index = id; // Remember the node's own ID.
    
        /* initialise “_is_present” flags */
        reset_port_in_is_present();
        
        election_timeout_reached_is_present = false;
        start_election_is_present           = false;
        
        election_timeout_reached_pending_count 	= 0;
        
        scheduled_reaction_1 = false;
        scheduled_reaction_2 = false;
        scheduled_reaction_3 = false;
        scheduled_reaction_4 = false;
        scheduled_reaction_5 = false;
        scheduled_reaction_6 = false;
        scheduled_reaction_7 = false;
        scheduled_reaction_8 = false;
        scheduled_reaction_9 = false;

        // schedule the startup reaction immediately
        self.reaction_2();
    }
    
    void reset_port_in_is_present() {
    	for (int i = 0; i < NUM_NODES; i++) {
        	in_is_present[i] = false;
        }
    }
    
    // FIXME: Non-det. choices do not work in methods.
    // For reaction body helper message servers, give them the highest priority.
    // TODO: Document this assignment of @globalPriority in the conversion doc.
    @globalPriority(0)
    msgsrv randomize_election_timeout() {
        election_timeout = ?(150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300);
    }
    
    // SCIENTIFIC MODELING of communication latencies
    // Each element is the latency between the current node and a destination node.
    @globalPriority(0)
    msgsrv randomize_latencies() {
    	for (int i = 0; i < NUM_NODES; i++) {
    		latencies[i] = ?(150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300);
    	}
    }
    
    @globalPriority(0)
    msgsrv send_message(int dest, int type) {
    
    	out_type_value[dest] = type;
    	out_term_value[dest] = term;
    	
    	self.randomize_latencies();
    	
    	if (dest == 0) {
    		n0.read_port_in(bank_index, out_type_value[0], term) after(latencies[0]);
    	} else if (dest == 1) {
    		n1.read_port_in(bank_index, out_type_value[0], term) after(latencies[1]);
    	} else if (dest == 2) {
    		n2.read_port_in(bank_index, out_type_value[0], term) after(latencies[2]);
    	} else if (dest == 3) {
    		n3.read_port_in(bank_index, out_type_value[0], term) after(latencies[3]);
    	} else {
    		n4.read_port_in(bank_index, out_type_value[0], term) after(latencies[4]);
    	}
    }
    
    @globalPriority(0)
    msgsrv broadcast_message(int type) {
    
    	for (int i = 0; i < NUM_NODES; i++) {
    		out_type_value[i] = type;
    		out_term_value[i] = term;
    	}
    	
    	self.randomize_latencies();
    	
    	// FIXME: Does this support overwrite semantics? Not important for this application.
    	n0.read_port_in(bank_index, out_type_value[0], term) after(latencies[0]);
    	n1.read_port_in(bank_index, out_type_value[0], term) after(latencies[1]);
    	n2.read_port_in(bank_index, out_type_value[0], term) after(latencies[2]);
    	n3.read_port_in(bank_index, out_type_value[0], term) after(latencies[3]);
    	n4.read_port_in(bank_index, out_type_value[0], term) after(latencies[4]);
    }

	// Check if the action is updated. If so, cancel the current one.
	// To set its @globalPriority, here we take the smaller reaction priority
	// triggered by this reaction (reaction 4 with @globalPriority(8)) and
	// subtract 1 from it, i.e., @globalPriority(7).
	@globalPriority(7)
    msgsrv lf_schedule_election_timeout_reached() {
    	// Since this msgsrv is triggered, decrement the count.
    	election_timeout_reached_pending_count--;
    	// Check if any is still pending, if so, don't do anything,
    	// i.e., canceling the stale event. Only trigger reactions
    	// when there are no actions pending. 
    	if (election_timeout_reached_pending_count == 0) {
    		election_timeout_reached_is_present = true;
	        // Trigger a reaction based on mode.
	        // TODO: Document this treatment of modes in the conversion doc.
			if (mode == FOLLOWER) {
				self.reaction_4();
			} else if (mode == CANDIDATE) {
				self.reaction_9();
			}
    	}
    }

	@globalPriority(13) // Triggering reaction_7 with @globalPriority(14)
    msgsrv lf_schedule_start_election() {
        start_election_is_present = true;
        if (mode == CANDIDATE) {
        	self.reaction_7();
        }
    }

	// A parameterized read_port msgsrv for multiports
	@globalPriority(1) // Triggering reaction 1 with @globalPriority(2), so this msgsrv needs to precede it.
    msgsrv read_port_in(int chan, int _type, int _term) {
        in_type[chan]    	= _type;
        in_term[chan]       = _term;
        in_is_present[chan] = true;

		// TODO: Schedule a reaction based on mode.
        if (!scheduled_reaction_1) {
            scheduled_reaction_1 = true;
        }
    }

	@globalPriority(2)
    msgsrv reaction_1() {
    	reaction_1_postamble();
    }
    
    @globalPriority(4)
    msgsrv reaction_2() {
    	// Select election timeout
        self.randomize_election_timeout();
        
        // Track the number of lf_schedule_election_timeout_reached msgsrv enqueued.
        election_timeout_reached_pending_count++;
        // Schedule lf_schedule_election_timeout_reached.
        self.lf_schedule_election_timeout_reached() after(election_timeout);
        
        reaction_2_postamble();
    }
    
    @globalPriority(6)
    msgsrv reaction_3() {
    	for (int _sender = 0; _sender < NUM_NODES; _sender++) {
    		int incoming_type = in_type[_sender];
    		int incoming_term = in_term[_sender];
    		if (in_is_present[_sender] && _sender != bank_index) {
    			if (_sender == leader
              		&& incoming_type == MSG_HEART) {
              		// Make sure its term is the same as the leader's term.
              		term = incoming_term;
              		// Send back an ack.
              		send_message(_sender, MSG_ACK);
              		// Renew the pending timeout action's expiry time.
            		self.lf_schedule_election_timeout_reached() after(election_timeout);
              	}
              	else if (incoming_type == MSG_ELECTION) {
              		// Prepare to vote in the new term.
              		// Ignore if the incoming term is smaller than the current term.
              		if (incoming_term > term) {
                		term = incoming_term;
                		voted_for = -1;
              		}
              		// If it has not voted for this incoming term, send back a vote.
	              	// If the sender asks again because the pervious vote message is lost,
	              	// send back another message.
	              	if (incoming_term == term &&
	                	(voted_for == -1 || voted_for == _sender)) {
	                	voted_for = _sender;
	                	send_message(_sender, MSG_VOTE);
	                	// Renew the pending timeout action's expiry time.
	                	self.lf_schedule_election_timeout_reached() after(election_timeout);
	              	}
              	}
              	else if (_sender != leader
                	&& (incoming_type == MSG_LEADER || incoming_type == MSG_HEART)
                	&& incoming_term >= term   // Only accept a new leader if its term is greater or equal.
          		) {
          			// A new leader has been declared.
              		leader = _sender;
              		// Update its term to the leader's term.
              		term = incoming_term;
              		// Send back an ack.
              		send_message(_sender, MSG_ACK);
              		// Renew the pending timeout action's expiry time.
              		self.lf_schedule_election_timeout_reached() after(election_timeout);
          		}
    		}
    	}
    	
    	reaction_3_postamble();
    }
    
    @globalPriority(8)
    msgsrv reaction_4() {
	    // In Rebeca, mode transition needs to happen before lf_schedule,
	    // so that reaction triggering works properly.
		mode = CANDIDATE;
		self.lf_schedule_start_election() after(0);
		
		reaction_4_postamble();
    }
    
    // The leader periodically sends out a heartbeat message to all
    // follower nodes to maintain authority.
    @globalPriority(10)
    msgsrv reaction_5() {
    	self.broadcast_message(MSG_HEART);
    	
    	reaction_5_postamble();
    }
    
    @globalPriority(12)
    msgsrv reaction_6() {
    	// Receive acks from followers.
    	for (int _sender = 0; _sender < NUM_NODES; _sender++) {
    		int incoming_type = in_type[_sender];
    		int incoming_term = in_term[_sender];
    		if (in_is_present[_sender] && _sender != bank_index) {
    			if (incoming_type == MSG_HEART) {
            		// Compare the term id, if they are equal, compare bank_index.
            		if (incoming_term > term
              			|| (incoming_term == term && _sender > bank_index)) {
              			// Another node has declared itself to be the leader.
              			leader = _sender;
              			// Send back an ack.
              			send_message(_sender, MSG_ACK);
              			// Update its term to the leader's term.
              			term = incoming_term;
              			// Renew the pending timeout action's expiry time.
              			self.lf_schedule_election_timeout_reached() after(election_timeout);
              			// Become a follower.
              			mode = FOLLOWER;
            		}
          		}
          		else if (incoming_type == MSG_ACK) {
          			// Do nothing
          		}
    		}
    	}
    	reaction_6_postamble();
    }
    
    @globalPriority(14)
    msgsrv reaction_7() {
    	// Increment its term id.
    	term++;
    	// Reset the vote count to 0.
    	// NOTE: This was a real bug, which could be a good test case for model checking.
    	votes_received = 0;
    	// Vote for itself.
    	voted_for = bank_index;
    	votes_received++;
    	// Broadcast an election start message.
    	self.broadcast_message(MSG_ELECTION);
    	// Schedule a timeout action to collect votes.
    	self.lf_schedule_election_timeout_reached() after(election_timeout);
    	
    	reaction_7_postamble();
    }
    
    @globalPriority(16)
    msgsrv reaction_8() {
    	// Receive votes from followers.
    	for (int _sender = 0; _sender < NUM_NODES; _sender++) {
    		int incoming_type = in_type[_sender];
    		int incoming_term = in_term[_sender];
    		if (in_is_present[_sender] && _sender != bank_index) {
    			if (incoming_type == MSG_VOTE
            		&& incoming_term == term) {
            		votes_received++;
            		// Check if a majority of votes is received, if so,
            		// declare to be the leader.
            		if (votes_received > NUM_NODES / 2) {
            			// Broadcast a leader message to all nodes.
            			broadcast_message(MSG_LEADER);
            		}
            		// Mark itself as the leader.
              		leader = bank_index;
              		// Transition to leader mode.
              		mode = LEADER;
            	}
            	else if (incoming_type == MSG_LEADER
              		|| incoming_type == MSG_HEART) {
              		// Compare the term id, if they are equal, compare bank_index.
              		if (incoming_term > term
              			|| (incoming_term == term && _sender > bank_index)) {
              			// Another node has declared itself to be the leader.
		              	leader = _sender;
		              	// Send back an ack.
		              	send_message(_sender, MSG_ACK);
		              	// Update its term to the leader's term.
		              	term = incoming_term;
		              	// Renew the pending timeout action's expiry time.
		              	self.lf_schedule_election_timeout_reached() after(election_timeout);
		              	// Become a follower.
		              	mode = FOLLOWER;
              		}
              	}
              	else if (incoming_type == MSG_ELECTION) {
            		// Prepare to vote in the new term.
            		// Ignore if the incoming term is smaller than the current term.
            		if (incoming_term > term) {
              			term = incoming_term;
              			voted_for = -1;
              			mode = FOLLOWER;
            		}
            		// If it has not voted for this incoming term, send back a vote.
            		// If the sender asks again because the pervious vote message is lost,
            		// send back another message.
            		if (incoming_term == term &&
              			(voted_for == -1 || voted_for == _sender)) {
              			voted_for = _sender;
              			send_message(_sender, MSG_VOTE);
              			// Renew the pending timeout action's expiry time.
              			self.lf_schedule_election_timeout_reached() after(election_timeout);
            		}
          		}
    		}
    	}
    	
    	reaction_8_postamble();
    }
    
    // If timeout is reached and no leader has been declared, then
    // we do not have a winner. Restart the election.
    @globalPriority(18)
    msgsrv reaction_9() {
    	self.lf_schedule_start_election() after(0);
    	
    	reaction_9_postamble();
    }

    // Postamble
    @globalPriority(19)
    msgsrv reaction_1_postamble() {
        reset_port_in_is_present();
        scheduled_reaction_1 = false;
    }
    
    @globalPriority(19)
    msgsrv reaction_2_postamble() {
    	// Triggered by startup.
    	scheduled_reaction_2 = false;
    }
    
    @globalPriority(19)
    msgsrv reaction_3_postamble() {
    	reset_port_in_is_present();
    	scheduled_reaction_3 = false;
    }
    
    @globalPriority(19)
    msgsrv reaction_4_postamble() {
    	election_timeout_reached_is_present = false;
        scheduled_reaction_4 = false;
    }
    
    @globalPriority(19)
    msgsrv reaction_5_postamble() {
    	// Schedule the next timer firing of reaction_5 if still the leader.
    	// TODO: Document this treatment of modes and timer in the conversion doc.
    	if (mode == LEADER) {
    		self.reaction_5() after(HEARTBEAT_PERIOD_MS);
    	}
    	scheduled_reaction_5 = false;
    }
    
    @globalPriority(19)
    msgsrv reaction_6_postamble() {
    	reset_port_in_is_present();
    	scheduled_reaction_6 = false;
    }
    
    @globalPriority(19)
    msgsrv reaction_7_postamble() {
    	start_election_is_present = false;
    	scheduled_reaction_7 = false;
    }
    
    @globalPriority(19)
    msgsrv reaction_8_postamble() {
    	reset_port_in_is_present();
    	scheduled_reaction_8 = false;
    }
    
    @globalPriority(19)
    msgsrv reaction_9_postamble() {
    	election_timeout_reached_is_present = false;
    	scheduled_reaction_9 = false;
    }
}

main {
    RaftNode n0(n1,n2,n3,n4,n0):(0);
    RaftNode n1(n0,n2,n3,n4,n1):(1);
    RaftNode n2(n0,n1,n3,n4,n2):(2);
    RaftNode n3(n0,n1,n2,n4,n3):(3);
    RaftNode n4(n0,n1,n2,n3,n4):(4);
}
